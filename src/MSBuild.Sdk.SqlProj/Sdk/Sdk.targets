<?xml version="1.0" encoding="utf-8"?>
<!--
  This file contains the necessary targets to build an MSBuild.Sdk.SqlProj project.
  It is heavily inspired by Microsoft.Build.NoTargets with some modifications.
  See https://github.com/microsoft/MSBuildSdks for more details.
-->
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    Set LanguageTargets to Microsoft.Common.targets for any project that the SDK won't (.proj, .noproj, etc)
    https://github.com/dotnet/sdk/blob/50ddfbb91be94d068514e8f4b0ce1052156364a0/src/Tasks/Microsoft.NET.Build.Tasks/sdk/Sdk.targets#L28
    
    We can't default LanguageTargets it is set in the SDK and immediately imported.  So we can only default
    it if we know the SDK won't.  Projects probably won't load in Visual Studio but will build from the
    command-line just fine.
  -->
  <PropertyGroup>
    <LanguageTargets Condition=" '$(LanguageTargets)' == '' And '$(MSBuildProjectExtension)' != '.csproj' And '$(MSBuildProjectExtension)' != '.vbproj' And '$(MSBuildProjectExtension)' != '.fsproj' ">$(MSBuildToolsPath)\Microsoft.Common.targets</LanguageTargets>
    <MSBuildAllProjects Condition="'$(MSBuildToolsVersion)' != 'Current'">$(MSBuildAllProjects);$(MsBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <Import Project="$(CustomBeforeNoTargets)" Condition="'$(CustomBeforeNoTargets)' != '' and Exists('$(CustomBeforeNoTargets)')" />

  <PropertyGroup>
    <!-- Don't include build output in a package since NoTargets projects don't emit an assembly. -->
    <IncludeBuildOutput Condition="'$(IncludeBuildOutput)' == ''">false</IncludeBuildOutput>
  </PropertyGroup>

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" Condition=" '$(CommonTargetsPath)' == '' " />
  
  <ItemGroup>
    <_IntermediateAssembly Include="@(IntermediateAssembly)" />
    <IntermediateAssembly Remove="@(IntermediateAssembly)" />
    <IntermediateAssembly Include="@(_IntermediateAssembly->'%(Identity)'->Replace('.dll', '.dacpac'))" />
    <IntermediateRefAssembly Remove="@(IntermediateRefAssembly)" />
  </ItemGroup>

  <PropertyGroup>
    <!--
      This property must be overridden to remove a few targets that compile assemblies
    -->
    <CoreBuildDependsOn>
      BuildOnlySettings;
      PrepareForBuild;
      PreBuildEvent;
      ResolveReferences;
      GetTargetPath;
      CoreCompile;
      PrepareForRun;
      IncrementalClean;
      PostBuildEvent
    </CoreBuildDependsOn>
  </PropertyGroup>

  <!--
    The CopyFilesToOutputDirectory target is hard coded to depend on ComputeIntermediateSatelliteAssemblies.  NoTargets projects do no generate resource assemblies
    so the target is replaced with a no-op
  -->
  <Target Name="ComputeIntermediateSatelliteAssemblies" />

  <!-- For CPS/VS support. See https://github.com/dotnet/project-system/blob/master/src/Microsoft.VisualStudio.ProjectSystem.Managed/ProjectSystem/DesignTimeTargets/Microsoft.Managed.DesignTime.targets#L60 -->
  <Import Project="$(MSBuildExtensionsPath)\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets" 
          Condition="'$(DebuggerFlavor)' == '' And Exists('$(MSBuildExtensionsPath)\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets')" />

  <!--
    NoTargets projects do not build an assembly so dependent projects shouldn't get a path to the target.  Override the GetTargetPath to do nothing.
  -->
  <Target Name="GetTargetPath" />

  <!--
    The GetTargetPathWithTargetPlatformMoniker target uses a BeforeTargets so the only way to disable it is to override it with an empty target.
  -->
  <Target Name="GetTargetPathWithTargetPlatformMoniker" />

  <Import Project="$(CustomAfterNoTargets)" Condition="'$(CustomAfterNoTargets)' != '' and Exists('$(CustomAfterNoTargets)')" />

  <!-- 
    Microsoft.Managed.Targets is imported by the managed language target files in MSBuild 16.0 and above, but most of the msbuild tasks are actually in Microsoft.Common.Currentversion.targets.
    So import it when the managed targets do not get imported.
  -->
  <Import Project="$(MSBuildToolsPath)\Microsoft.Managed.targets" Condition="'$(MSBuildAssemblyVersion)' >= '16.0' And '$(ManagedLanguageTargetsGotImported)' != 'true'" />

  <!--
    Validates that the environment is setup correctly for the BuildDacpac tool to run. Currently we target .NET Core 2.1 and 3.1 and we pick the highest version based on
    the BundledNETCoreAppTargetFrameworkVersion property. This property is set by the SDK, so we'll need to ensure that the SDK that is being used is compatible with one
    of the supported target frameworks.
  -->
  <Target Name="ValidateEnvironment">
    <PropertyGroup>
      <BuildDacpacTfm>netcoreapp$(BundledNETCoreAppTargetFrameworkVersion)</BuildDacpacTfm>
      <BuildDacpacExe>$(MSBuildThisFileDirectory)../tools/$(BuildDacpacTfm)/BuildDacpac.dll</BuildDacpacExe>
    </PropertyGroup>
    <Error Condition="!Exists($(BuildDacpacExe))"
           Text="The current SDK bundles target framework 'netcoreapp$(BundledNETCoreAppTargetFrameworkVersion)' which is not supported by MSBuild.Sdk.SqlProj. Either install a .NET Core SDK that supports 2.1 or 3.1, or file an issue at https://github.com/jmezach/MSBuild.Sdk.SqlProj/ to add support." />
    <Message Importance="normal" Text="Using target framework $(BuildDacpacTfm) to run BuildDacpac" />
  </Target>

  <!--
    Resolves package references to .dacpac packages by enumerating all package references, resolving their associated Pkg<package-id> property to get the physical
    location of the package and then checking if a that package contains a .dacpac file inside of the tools folder.
  -->
  <Target Name="ResolveDatabasePackageReferences">
    <ItemGroup> 
      <!-- Resolve all package references to their physical location first -->
      <_ResolvedPackageReference Include="%(PackageReference.Identity)">
        <!-- Determine technical name of package (ie. DeVries.WMS.Database -> DeVries_WMS_Database) -->
        <PackageName>@(PackageReference->'%(Identity)'->Replace('.', '_'))</PackageName>
        <!-- Prepend Pkg to techical name from above and resolve variable (ie. PkgDeVries_WMS_Database -> C:\Users\<username>\.nuget\packages\devries.wms.database\<version> -->
        <PhysicalLocation>$(Pkg%(_ResolvedPackageReference.PackageName))</PhysicalLocation>
      </_ResolvedPackageReference>
    
      <!-- Build a list of package references that include a dacpac file matching the package identity in their tools folder -->
      <DacpacReference Include="@(_ResolvedPackageReference)" Condition="Exists('%(PhysicalLocation)\tools\%(Identity).dacpac')" />
    </ItemGroup>
  
    <Message Importance="normal" Text="Resolved package reference %(_ResolvedPackageReference.Identity) to %(_ResolvedPackageReference.PhysicalLocation)" />
    <Message Importance="normal" Text="Resolved database package references: @(DacpacReference)" />
  </Target>

  <!--
    Performs the actual compilation of the input files (*.sql) into a .dacpac package by calling into a command line tool to do the actual work.
  -->
  <Target Name="CoreCompile" DependsOnTargets="ValidateEnvironment;ResolveDatabasePackageReferences">
    <ItemGroup>
      <_PropertyNames Include="$(KnownModelProperties)" />
      <PropertyNames Include="@(_PropertyNames)" Condition=" '$(%(Identity))' != '' ">
        <PropertyValue>$(%(_PropertyNames.Identity))</PropertyValue>
      </PropertyNames>
    </ItemGroup>
    <!-- Build arguments for the command line tool  -->
    <PropertyGroup>
      <OutputPathArgument>@(IntermediateAssembly->'-o &quot;%(Identity)&quot;', ' ')</OutputPathArgument>
      <MetadataArguments>-n $(MSBuildProjectName) -v $(PackageVersion)</MetadataArguments>
      <SqlServerVersionArgument>-sv $(SqlServerVersion)</SqlServerVersionArgument>
      <ReferenceArguments>@(DacpacReference->'-r &quot;%(PhysicalLocation)\tools\%(Identity).dacpac&quot;', ' ')</ReferenceArguments>
      <InputFileArguments>@(Content->'-i &quot;%(FullPath)&quot;', ' ')</InputFileArguments>
      <PropertyArguments>@(PropertyNames->'-p %(Identity)=%(PropertyValue)')</PropertyArguments>
      <BuildDacpacTfm>netcoreapp$(BundledNETCoreAppTargetFrameworkVersion)</BuildDacpacTfm>
    </PropertyGroup>
    <!-- Run it, except during design-time builds -->
    <Exec Command="dotnet $(MSBuildThisFileDirectory)../tools/$(BuildDacpacTfm)/BuildDacpac.dll $(OutputPathArgument) $(MetadataArguments) $(SqlServerVersionArgument) $(InputFileArguments) $(ReferenceArguments) $(PropertyArguments)"
          Condition="'$(DesignTimeBuild)' != 'true' AND '$(BuildingProject)' == 'true'"/>
  </Target>
  
</Project>