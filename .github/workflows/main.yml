# Name of the workflow
name: CI

# Controls when the action will run. Triggers the workflow on push or pull request events
on:
  push:
    branches: [ master, feature/* ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Run the build first
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.102'

    # Install Nerdbank.GitVersioning
    - name: install nbgv
      run: dotnet tool install --tool-path . nbgv

    # Set version
    - name: set version
      run: ./nbgv cloud

    # Build command line tool
    - name: dotnet build
      run: dotnet build -c Release
      working-directory: src/BuildDacpac/

    # Run tests for command line tool
    - name: dotnet test
      run: dotnet test -c Release
      working-directory: test/BuildDacpac.Tests/

    # Run build for SDK package
    - name: dotnet build
      run: dotnet build -c Release
      working-directory: src/MSBuild.Sdk.SqlProj

    # Ensure that test project builds
    - name: dotnet build TestProject
      run: dotnet build -c Release
      working-directory: test/TestProject
    
    # Package
    - name: dotnet pack
      run: dotnet pack -c Release src/MSBuild.Sdk.SqlProj/MSBuild.Sdk.SqlProj.csproj

    # Upload package
    - name: upload
      uses: actions/upload-artifact@v1
      with:
        name: nuget-package
        path: ./src/MSBuild.Sdk.SqlProj/bin/Release/

  # Run tests in parallel
  test:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ "ubuntu-18.04", "macos-10.15", "windows-2019" ]
        dotnet: [ '2.1.804', '3.1.102' ]
      fail-fast: true
    steps:
    # Fetch sources
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.
    
    # Setup .NET SDK
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ matrix.dotnet }}

    # Apply Nerdbank.GitVersioning
    - uses: aarnott/nbgv@v0.3
      id: nbgv

    # Replace tokens 
    - uses: cschleiden/replace-tokens@v1
      name: replace tokens
      with:
        files: 'test/TestProjectWithSDKRef/TestProjectWithSDKRef.csproj'
      env:
        VERSION: ${{ steps.nbgv.outputs.NuGetPackageVersion }}

    # Download artifact
    - name: download-artifact
      uses: actions/download-artifact@v1
      with:
        name: nuget-package
        path: test/TestProjectWithSDKRef/nuget-package

    # Restore packages
    - name: dotnet restore
      run: dotnet restore --verbosity n
      working-directory: ./test/TestProjectWithSDKRef/

    # Build the project
    - name: build project
      run: dotnet build
      working-directory: ./test/TestProjectWithSDKRef/